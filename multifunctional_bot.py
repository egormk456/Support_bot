from aiogram import Bot, Dispatcher, executor
from aiogram.types import Message, CallbackQuery, ContentTypes
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from aiogram.dispatcher import FSMContext

from markups.back_markups import (
    back_to_menu_markup,
    back_to_funnel_settings,
    back_to_funnel_steps,
    back_to_admin_markup
)

from markups.markups_file import (
    funnel_markup,
    bots_markup,
    funnel_steps_markup,
    autoanswers_markup,
    invites
)

from markups.admin_markup import admin_actions_markup

from handlers.bot_states import AddBotStates, FunnelStates, BotStates
from config import livegram_token
from utils.db_api.database import Database
from utils.db_api.funnel_db import FunnelDatabase
from utils.db_api.admin_database import AdminDatabase
from utils.usefull_functions.files_names import files_names
from utils.usefull_functions.sending_message import sending_function
from utils.usefull_functions.create_markup import create_markup
from xlsxwriter import Workbook
import os


admin_dict = {
    "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É": "get-statistics",
    "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ": "edit-start-message",
    "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–∏": "funnel-settings",
    "–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã": "autoanswers",
    "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏": "invites_links",
    "–ü–µ—Ä–µ–¥–∞—Ç—å –±–æ—Ç–∞": "transfer_bot",
    "–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞": "delete_bot",
    "–ö —Å–ø–∏—Å–∫—É –±–æ—Ç–æ–≤": "back-to-my-bots"
}



start_text = "<b>CustomerLive</b> ‚Äì —ç—Ç–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ç–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ Telegram. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —á–∏—Ç–∞–π—Ç–µ –≤ " \
             "<a href='https://telegra.ph/CustomerLive--spravka-07-18'>—Å–ø—Ä–∞–≤–∫–µ</a>.\n" \
                   "- –ø–æ–ª—É—á–∞–π—Ç–µ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º –æ–∫–Ω–µ\n" \
                   "- –∏–∑—É—á–∞–π—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏\n" \
                   "- —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–∏\n" \
                   "- —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã\n" \
                   "- –≤—Å–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∏–∞–ª–æ–≥ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º"

loading_text = "üïí–ó–∞–≥—Ä—É–∂–∞—é..."


class LivegramBot:
    def __init__(self):
        self.bot = Bot(livegram_token)
        memory = MemoryStorage()
        self.dp = Dispatcher(self.bot, storage=memory)
        self.db = Database(name="comments.db")
        self.funnel_db = FunnelDatabase(name="funnels.db")
        self.admin_db = AdminDatabase(db_name="comments.db", funnel_db_name="funnels.db")

    async def start_handler(self, message: Message, state: FSMContext):
        if message.chat.type == "private":
            await state.finish()
            text = message.text
            tg_id = message.from_user.id
            self.admin_db.add_user(tg_id=message.from_user.id)
            links_numbers = self.db.get_links_info(token=livegram_token)
            links_numbers = [elem[1] for elem in links_numbers]
            tokens = self.db.get_tokens()

            if text[7:] in tokens:
                self.db.transfer_bot(tg_id, text[7:])
                await self.bot.send_message(
                    chat_id=message.chat.id,
                    text="–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –±–æ—Ç –≤–∞—à"
                )

            else:
                if len(text[7:]) > 0 and int(text[7:]) in links_numbers:
                    self.db.update_link_views(
                        token=livegram_token,
                        link_num=int(text[7:])
                    )

                await message.answer(
                    text=start_text,
                    reply_markup=bots_markup,
                    parse_mode="html",
                    disable_web_page_preview=True
                )

    async def callback_handler(self, call: CallbackQuery, state: FSMContext):
        chat = call.message.chat.id
        tg_id = call["from"]["id"]
        callback = call.data
        mess_id = call.message.message_id
        tokens = self.db.get_tokens(tg_id=tg_id)

        user_state = await state.get_state()

        print(f"{callback =}, {user_state}")
        if callback == "back-to-menu":
            await state.finish()

            await self.bot.delete_message(
                chat_id=tg_id,
                message_id=mess_id
            )

            await self.bot.send_message(
                chat_id=chat,
                text=start_text,
                reply_markup=bots_markup,
                parse_mode="html"
            )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞
        elif callback == "add-bot":
            await AddBotStates.add_bot.set()

            await self.bot.delete_message(
                chat_id=tg_id,
                message_id=mess_id
            )

            settings_message = await self.bot.send_message(
                chat_id=chat,
                text="–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç, –≤–∞–º –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–≤–∞ –¥–µ–π—Å—Ç–≤–∏—è:\n"
                     "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ @BotFather –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /newbot\n"
                     "2. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω (12345:6789ABCDEF) ‚Äî –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ, –æ–Ω —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç\n\n"
                     "–í–∞–∂–Ω–æ: –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ –±–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ (Controller Bot, —Ä–∞–∑–Ω—ã–µ CRM –∏ —Ç.–¥.)",
                reply_markup=back_to_menu_markup
            )

            async with state.proxy() as data:
                data["message_id"] = settings_message.message_id

        # –í—Ç–æ—Ä–æ–π —à–∞–≥
        elif callback == "to-2-step" and user_state == "AddBotStates:step_1":
            await AddBotStates.step_2.set()

            async with state.proxy() as data:
                token = data["token"]

            bot_info = await Bot(token=token).me

            text = f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–æ—Ç: @{bot_info.username}\n\n" \
                   f"4. –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –∫–∞–Ω–∞–ª–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.\n" \
                   f"–î–ª—è —ç—Ç–æ–≥–æ: –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –ª–æ–≥–æ—Ç–∏–ø -> –Ω–∞–∂–º–∏—Ç–µ ¬´—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å¬ª –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É -> –Ω–∞–∂–º–∏—Ç–µ –û–±—Å—É–∂–¥–µ–Ω–∏–µ -> –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é.\n" \
                   f"5. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞\n" \
                   f"6. –ù–∞–∑–Ω–∞—á—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã\n\n" \
                   f"–í —ç—Ç—É –≥—Ä—É–ø–ø—É –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤.\n" \
                   f"–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"


            step_2_message = await self.bot.send_message(
                chat_id=tg_id,
                text=text,
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(text="–î–∞–ª–µ–µ >>>", callback_data="to-3-step")
                )
            )

            async with state.proxy() as data:
                data["step_2"] = step_2_message.message_id

        # –¢—Ä–µ—Ç–∏–π —à–∞–≥
        elif callback == "to-3-step" and user_state == "AddBotStates:step_2":
            async with state.proxy() as data:
                token = data["token"]

            bot_info = await Bot(token=token).me

            text = f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–æ—Ç: @{bot_info.username}\n\n" \
                   f"–û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!\n" \
                   f"–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∏ –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞–ª–∏ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª–µ –ø–æ—Å—Ç: /set_group\n\n" \
                   f"–ï—Å–ª–∏ –≤—ã –≤—Å–µ —Å–¥–µ–ª–∞–ª–∏ –≤–µ—Ä–Ω–æ, –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É ‚Äú–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ‚Äù\n" \
                   f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n\n" \
                   f"–ï—Å–ª–∏ –±–æ—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–µ–∑–¥–µ –ª–∏ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ /set_group\n" \
                   f"–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ ‚Äì @egormk"

            step_3_message = await self.bot.send_message(
                chat_id=tg_id,
                text=text,
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="bot_added")
                )
            )

            async with state.proxy() as data:
                data["step_3"] = step_3_message.message_id

        # –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!
        elif callback == "bot_added":
            if callback == "bot_added":
                async with state.proxy() as data:
                    token = data["token"]

                    step_1 = data.get("step_1")
                    step_2 = data.get("step_2")
                    step_3 = data.get("step_3")
                    message_id = data.get("message_id")
                    token_is_used = data.get("token_is_used")
                    incorrect_token = data.get("incorrect_token")
                    used_token_message = data.get("used_token_message")

                    steps = [
                        step_1, step_2,
                        step_3, message_id,
                        token_is_used,
                        incorrect_token,
                        used_token_message
                    ]

                    for step in steps:
                        if step is not None:
                            try:
                                await self.bot.delete_message(
                                    chat_id=tg_id,
                                    message_id=step
                                )
                            except Exception:
                                pass

                bot_info = await Bot(token).me

                text = f"–ë–æ—Ç @{bot_info.username} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ CustomerLive.\n" \
                       f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –∑–∞—Ç–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ. " \
                       f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –≤ –≥—Ä—É–ø–ø—É, –∞ –≤ –∫–∞–Ω–∞–ª–µ —Å–æ–∑–¥–∞—Å—Ç—Å—è –ø–æ—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º.\n\n" \
                       f"<b>–ö–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è?</b>\n" \
                       f"–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Å–æ–∑–¥–∞–ª–∏,–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é Telegram –¥–ª—è <a href='https://telegram.org/tour/groups#replies'>–æ—Ç–≤–µ—Ç–æ–≤</a>. –î–ª—è —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞–π—Ç–µ —Å–≤–∞–π–ø –≤–ª–µ–≤–æ (–∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –¥–≤–∞ —Ä–∞–∑–∞) –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å.\n\n" \
                       f"<b>–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?</b>\n" \
                       f"–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ú–æ–∏ –±–æ—Ç—ã¬ª –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ¬ª.\n\n" \
                       f"<b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã?</b>\n" \
                       f"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ú–æ–∏ –±–æ—Ç—ã¬ª –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É¬ª.\n\n" \
                       f"<b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫—É?</b>\n" \
                       f"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫—É  –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ú–æ–∏ –±–æ—Ç—ã¬ª –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ‚Äú–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–∏‚Äù\n\n" \
                       f"–ü–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å <a href='https://telegra.ph/CustomerLive--spravka-07-18'>—Å–ø—Ä–∞–≤–∫–µ</a> –æ —Ä–∞–±–æ—Ç–µ CustomerLive"


                await self.bot.send_message(
                    chat_id=chat,
                    text=text,
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton(
                            text=f"–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞: {bot_info.username}", callback_data=token),
                    ),
                    parse_mode="html",
                    disable_web_page_preview=True
                )
                await state.finish()
                await BotStates.bot_list.set()



        # –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
        elif callback == "my-bots" or callback == "back-to-my-bots":
            await BotStates.bot_list.set()
            bots_username_markup = InlineKeyboardMarkup()

            if tokens is not None and len(tokens) > 0:
                for token in tokens:
                    botik = Bot(token)
                    user_bot = await botik.me
                    bot_username = user_bot.username
                    bots_username_markup.add(InlineKeyboardButton(text=f"@{bot_username}", callback_data=token))
                text = "–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–≥–æ"

            else:
                text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞"

            bots_username_markup.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back-to-menu"))

            await self.bot.delete_message(
                chat_id=tg_id,
                message_id=mess_id
            )

            await self.bot.send_message(
                chat_id=chat,
                text=text,
                reply_markup=bots_username_markup
            )



        elif callback in ["add_application", "don't_add_application"]:
            await self.bot.delete_message(
                chat_id=tg_id,
                message_id=mess_id
            )

            if callback == "don't_add_application":
                await self.add_info(chat=chat, state=state)

            else:
                await BotStates.add_application_text.set()
                await self.bot.send_message(
                    chat_id=chat,
                    text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞—è–≤–∫–∏, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ - 1000 —Å–∏–º–≤–æ–ª–æ–≤",
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞", callback_data="back-to-admin")
                    )
                )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        elif tokens is not None and callback in tokens and user_state == "BotStates:bot_list" \
                or callback == "back-to-admin":
            await BotStates.bot_settings.set()

            await self.bot.delete_message(
                chat_id=tg_id,
                message_id=mess_id
            )

            if callback == "back-to-admin":
                async with state.proxy() as data:
                    token = data["token"]

                await state.finish()
                await BotStates.bot_settings.set()
                async with state.proxy() as data:
                    data["token"] = token
                bot_info = await Bot(token).me

            else:
                bot_info = await Bot(callback).me

            admin_markup = InlineKeyboardMarkup()
            admin_markup.add(
                InlineKeyboardButton(
                    text="–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
                    url=f"https://t.me/{bot_info.username}?start=1111111"
                )
            )


            for key, value in admin_dict.items():
                admin_markup.add(
                    InlineKeyboardButton(text=key, callback_data=value)
            )


            if callback != "back-to-admin":
                async with state.proxy() as data:
                    data["token"] = callback


                    data["username"] = bot_info.username

                await self.bot.send_message(
                    chat_id=tg_id,
                    text=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –±–æ—Ç–∞: @{bot_info.username}",
                    reply_markup=admin_markup
                )

            else:
                async with state.proxy() as data:
                    data["username"] = bot_info.username
                    sending_id = data.get("sending_message_id")
                    user_message_id = data.get("user_message_id")
                    instruction_message_id = data.get("instruction_message_id")

                    messages_list = [sending_id, user_message_id, instruction_message_id]

                    for id in messages_list:

                        if id is not None:
                            try:
                                await self.bot.delete_message(
                                    chat_id=chat,
                                    message_id=id
                                )
                            except Exception as e:
                                print(e, 250)

                await self.bot.send_message(
                    chat_id=tg_id,
                    text=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –±–æ—Ç–∞: @{bot_info.username}",
                    reply_markup=admin_markup
                )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        elif callback == "get-statistics":
            async with state.proxy() as data:
                token = data["token"]

            response = self.db.get_statistics(bot_token=token)
            text = f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n" \
                   f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {response['all_users']}\n" \
                   f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞: {response['blocked']}\n" \
                   f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞: {response['unblocked']}"

            await self.dp.bot.delete_message(
                chat_id=chat,
                message_id=mess_id
            )

            await self.dp.bot.send_message(
                chat_id=chat,
                text=text,
                reply_markup=back_to_admin_markup,
                parse_mode="html"
            )

        #–ø–µ—Ä–µ–¥–∞—á–∞ –±–æ—Ç–∞
        elif callback == "transfer_bot":
            async with state.proxy() as data:
                token = data["token"]

            await self.bot.send_message(
                chat_id=chat,
                text=f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –±–æ—Ç–∞ —á–µ–ª–æ–≤–µ–∫—É, –ø—É—Å—Ç—å –≤–≤–µ–¥—ë—Ç –≤ –±–æ—Ç–µ:\n"
                     f"/start {token}",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞–π—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞", callback_data="back-to-admin"),
                )
            )

        # –£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞
        elif callback == "delete_bot":
            await self.dp.bot.delete_message(
                chat_id=chat,
                message_id=mess_id
            )

            await BotStates.delete_bot.set()

            async with state.proxy() as data:
                token = data["token"]

            bot_info = await Bot(token).me

            await self.bot.send_message(
                chat_id=chat,
                text=f"–í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ @{bot_info.username}?",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(text="–î–∞", callback_data="Yes"),
                    InlineKeyboardButton(text="–ù–µ—Ç", callback_data="back-to-admin")
                )
            )

        elif callback == "Yes" and user_state == "BotStates:delete_bot":
            await self.dp.bot.delete_message(
                chat_id=chat,
                message_id=mess_id
            )

            async with state.proxy() as data:
                token = data["token"]
                self.db.delete_bot(token=token)
                self.funnel_db.delete_bot(token=token)

            await self.bot.send_message(
                chat_id=chat,
                text="–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(text="–ö —Å–ø–∏—Å–∫—É –±–æ—Ç–æ–≤", callback_data="back-to-my-bots")
                )
            )

            await state.finish()




        # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã
        elif callback == "autoanswers":
            await BotStates.bot_settings.set()
            await self.dp.bot.delete_message(
                chat_id=chat,
                message_id=mess_id
            )

            async with state.proxy() as data:
                token = data["token"]

            commands_list = self.db.get_commands_list(bot_token=token)

            if commands_list is not None:
                commands = [f"\n{num + 1}) {command}" for num, command in enumerate(commands_list)]
                text = "–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–∞–Ω–¥—ã:" + "".join(commands)
            else:
                text = "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"


            await self.dp.bot.send_message(
                chat_id=chat,
                text=text,
                reply_markup=autoanswers_markup,
                parse_mode="html"
            )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–º
        elif callback == "add-command":
            await BotStates.add_command.set()

            await self.dp.bot.delete_message(
                chat_id=chat,
                message_id=mess_id
            )

            await self.dp.bot.send_message(
                chat_id=chat,
                text="–î–æ–±–∞–≤—å—Ç–µ —Ñ—Ä–∞–∑—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç\n"
                     "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä –ø—Ä–∏–≤–µ—Ç –∏–ª–∏ –ª—é–±–∞—è –∫–æ–º–∞–Ω–¥–∞ <i>/gift</i>",
                reply_markup=back_to_admin_markup,
                parse_mode="html"
            )

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
        elif callback in ["edit-text-command", "edit-command"]:
            await self.dp.bot.delete_message(
                chat_id=chat,
                message_id=mess_id
            )

            if callback == "edit-text-command":
                await BotStates.choose_command.set()
                message_text = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å"
                command_mode = "autoanswer"

            else:
                await BotStates.edit_command.set()
                message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å\n\n" \
                               "–í–ê–ñ–ù–û: –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–π–¥—ë—Ç –Ω–∞ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É"
                command_mode = "command"

            async with state.proxy() as data:
                token = data["token"]
                data["command_mode"] = command_mode

            commands_list = self.db.get_commands_list(bot_token=token)


            if commands_list is not None:
                commands = "".join([f"{num + 1}) {command}\n" for num, command in enumerate(commands_list)])
                message_text = message_text + "\n–î–æ—Å—Ç—É–ø–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n" + commands

            elif commands_list is None:
                message_text = "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã."


            await self.dp.bot.send_message(
                chat_id=chat,
                text=message_text,
                reply_markup=back_to_admin_markup
            )

        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        elif callback == "delete-command":
            await BotStates.delete_command.set()
            async with state.proxy() as data:
                token = data["token"]

            commands_list = self.db.get_commands_list(bot_token=token)
            message_text = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å."

            if commands_list is not None:
                commands = "".join([f"{num + 1}) {command}\n" for num, command in enumerate(commands_list)])
                message_text = message_text + "\n–î–æ—Å—Ç—É–ø–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n" + commands

            elif commands_list is None:
                message_text = "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã."

            await self.dp.bot.delete_message(
                chat_id=chat,
                message_id=mess_id
            )

            await self.dp.bot.send_message(
                chat_id=chat,
                text=message_text,
                reply_markup=back_to_admin_markup
            )

        # –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏

        elif callback == "invites_links":
            await BotStates.invites_links.set()
            await self.dp.bot.delete_message(
                chat_id=chat,
                message_id=mess_id
            )

            await self.bot.send_message(
                chat_id=chat,
                text="–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏",
                reply_markup=invites
            )

        # –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        elif callback == "get_invites_links" or callback == "AGIL":
            await self.dp.bot.delete_message(
                chat_id=chat,
                message_id=mess_id
            )

            async with state.proxy() as data:
                token = data.get("token")
                markup = InlineKeyboardMarkup().add(
                    InlineKeyboardButton(
                        text="–ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º",
                        callback_data="invites_links"
                    )
                )

            if callback == "AGIL":
                token = livegram_token
                markup = None

            links_info = self.db.get_links_info(token=token)

            if links_info is None or len(links_info) == 0:
                await self.bot.send_message(
                    chat_id=chat,
                    text="–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏",
                    reply_markup=markup
                )

            else:
                bot_info = await Bot(token).me
                for name, invite_link_number, people_from_link in links_info:
                    text = f"–°—Å—ã–ª–∫–∞: https://t.me/{bot_info.username}?start={invite_link_number}\n" \
                           f"–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏: {name}\n" \
                           f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–æ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ: {people_from_link}"

                    await self.bot.send_message(
                        chat_id=chat,
                        text=text,
                        disable_web_page_preview=True,
                        reply_markup=InlineKeyboardMarkup().add(
                            InlineKeyboardButton(
                                text="–£–¥–∞–ª–∏—Ç—å",
                                callback_data=f"delete_link_{invite_link_number}"
                            )
                        )
                    )

                await self.bot.send_message(
                    chat_id=chat,
                    text=f"–í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {len(links_info)}",
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton(
                            text="–ù–∞–∑–∞–¥",
                            callback_data="invites_links"
                        )
                    )
                )

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        elif callback[:12] == "delete_link_":
            async with state.proxy() as data:
                token = data["token"]
            await self.bot.delete_message(
                chat_id=chat,
                message_id=mess_id
            )

            self.db.delete_invite_link(
                token=token,
                link_num=int(callback[12:])
            )

            await call.answer(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞", show_alert=True)


        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        elif callback == "add_invite_link" or callback == "AAIL":
            await BotStates.add_invite_link.set()

            await self.dp.bot.delete_message(
                chat_id=chat,
                message_id=mess_id
            )

            markup = InlineKeyboardMarkup().add(
                InlineKeyboardButton(
                    text="–ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º",
                    callback_data="invites_links"
                )
            )

            if callback == "AAIL":
                async with state.proxy() as data:
                    data["token"] = livegram_token
                    markup = None

            text = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥"
            instruction_message = await self.bot.send_message(
                chat_id=chat,
                text=text,
                disable_web_page_preview=True,
                reply_markup=markup
            )

            async with state.proxy() as data:
                data["instruction_message_id"] = instruction_message.message_id

        # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        elif callback == "edit-start-message":
            await BotStates.edit_start_message.set()

            await self.dp.bot.delete_message(
                chat_id=chat,
                message_id=mess_id
            )

            text = "–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞\n\n" \
                   "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n" \
                   "1) –¢–µ–∫—Å—Ç (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)\n" \
                   "2) –§–æ—Ç–æ\n" \
                   "3) –§–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º\n" \
                   "4) –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" \
                   "5) –í–∏–¥–µ–æ\n" \
                   "6) –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ\n" \
                   "7) PDF-—Ñ–∞–π–ª—ã\n" \
                   "–§–ê–ô–õ–´ –ù–ï –î–û–õ–ñ–ù–´ –ü–†–ï–í–´–®–ê–¢–¨ 20 –ú–ë!"

            instruction_message = await self.dp.bot.send_message(
                chat_id=chat,
                text=text,
                reply_markup=back_to_admin_markup
            )
            async with state.proxy() as data:
                data["instruction_message_id"] = instruction_message.message_id

        # –ü–æ–º–æ—â—å
        elif callback == "help":
            await self.bot.delete_message(
                chat_id=tg_id,
                message_id=mess_id
            )

            await self.bot.send_message(
                chat_id=chat,
                text="–ü–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ <a href='https://telegra.ph/CustomerLive--spravka-07-18'>—Å–ø—Ä–∞–≤–∫–µ</a>.\n\n"
                     "–ü–æ –¥—Ä—É–≥–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ: @egormk",
                parse_mode="html",
                reply_markup=back_to_menu_markup,
                disable_web_page_preview=True
            )




        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–æ–Ω–∫–∏
        elif callback == "funnel-settings" or callback == "back-to-funnel-steps":
            await FunnelStates.funnel_steps.set()
            await self.bot.delete_message(
                chat_id=tg_id,
                message_id=mess_id
            )

            async with state.proxy() as data:
                token = data["token"]
                bot_info = await Bot(token).me

            is_trigger = self.funnel_db.get_trigger(token=token)

            if is_trigger is None:
                trigger_text = "\n–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä"

            else:
                trigger_text = f"\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä: {is_trigger}"

            await self.bot.send_message(
                chat_id=tg_id,
                text=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞—à–µ–π –≤–æ—Ä–æ–Ω–∫–∏: @{bot_info.username}" + trigger_text,
                reply_markup=funnel_steps_markup,
            )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        elif callback == "add-trigger":
            await FunnelStates.add_trigger.set()
            await self.bot.delete_message(
                chat_id=tg_id,
                message_id=mess_id
            )

            async with state.proxy() as data:
                token = data["token"]
                trigger = self.funnel_db.get_trigger(token=token)

                if trigger is not None:
                    trigger_text = f"\n\n–ù—ã–Ω–µ—à–Ω–∏–π —Ç—Ä–∏–≥–≥–µ—Ä: {trigger}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä:",

                else:
                    trigger_text = "\n\n–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä:"

                text = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—Å—Ç –ø–æ–Ω—è—Ç—å –±–æ—Ç—É, —á—Ç–æ –Ω–∞–¥–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫—É.\n" \
                       "–¢—Ä–∏–≥–≥–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä ‚Äù–ø—Ä–∏–≤–µ—Ç‚Äù –∏–ª–∏  –ª—é–±–∞—è –∫–æ–º–∞–Ω–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä /gift –∏–ª–∏ /–ø–æ–¥–∞—Ä–æ–∫.\n" \
                       "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–∞ –Ω–∞—á–∏–Ω–∞–ª–∞ —Ä–∞–±–æ—Ç–∞—Ç—å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä: /start"

                await self.bot.send_message(
                    chat_id=tg_id,
                    text=text + trigger_text[0],
                    reply_markup=back_to_funnel_steps,
                )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞
        elif callback == "add-step":
            await FunnelStates.add_step.set()
            await self.bot.delete_message(
                chat_id=tg_id,
                message_id=mess_id
            )
            text = f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —à–∞–≥–∞\n" \
                   f"–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º, –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ-–∫—Ä—É–∂–æ–∫, –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ/–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, pdf-—Ñ–∞–π–ª, pdf-—Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é)\n" \
                   f"–ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–∏ –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Ä–µ–ø–æ—Å—Ç —É–∂–µ –≥–æ—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n" \
                   f"–í–ê–ñ–ù–û: –≤ —à–∞–≥ –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ, —Ç–æ –±—É–¥–µ—Ç –≤–∑—è—Ç—å –ø–µ—Ä–≤–æ–µ –∏–∑ –Ω–∏—Ö"

            await self.bot.send_message(
                chat_id=tg_id,
                text=text,
                reply_markup=back_to_funnel_steps,
            )

        # –°–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤
        elif callback == "steps-list" or callback == "back-to-steps-list" or callback == "delete-step":
            await self.bot.delete_message(
                chat_id=tg_id,
                message_id=mess_id
            )

            async with state.proxy() as data:
                token = data["token"]
                time_id = data.get("time_message_id")

                if time_id is not None:
                    try:
                        await self.bot.delete_message(
                            chat_id=tg_id,
                            message_id=time_id
                        )
                    except:
                        pass

            steps = self.funnel_db.get_steps(token=token)
            if steps is not None:
                if callback == "delete-step":
                    text = "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–≥, –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —à–∞–≥–∞, —Ç–æ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ —à–∞–≥–æ–≤:"
                    await FunnelStates.delete_step.set()
                else:
                    text = "–í–∞—à–∏ —à–∞–≥–∏:"
                    await FunnelStates.steps_list.set()

                steps_markup = InlineKeyboardMarkup()
                for num, step in enumerate(steps):
                    steps_markup.add(InlineKeyboardButton(text=f"–®–∞–≥ ‚Ññ{num + 1}", callback_data=f"step{num + 1}"))

                steps_markup.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back-to-funnel-steps"))

                await self.bot.send_message(
                    chat_id=tg_id,
                    text=text,
                    reply_markup=steps_markup,
                )
            else:
                await self.bot.send_message(
                    chat_id=tg_id,
                    text="–í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞",
                    reply_markup=back_to_funnel_steps,
                )

        # –£–¥–∞–ª–µ–Ω–∏–µ —à–∞–≥–∞
        elif callback[:7] == "stepdel":
            print(user_state)
            async with state.proxy() as data:
                token = data["token"]

                time_id = data.get("time_message_id")

                if time_id is not None:
                    await self.bot.delete_message(
                        chat_id=tg_id,
                        message_id=time_id
                    )

            await self.bot.delete_message(
                chat_id=tg_id,
                message_id=mess_id
            )

            self.funnel_db.delete_step(token=token, step_number=int(callback[7:]))

            await call.answer(text=f"–®–∞–≥ ‚Ññ{callback[7:]} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω", show_alert=True)
            bot_info = await Bot(token).me
            is_trigger = self.funnel_db.get_trigger(token=token)

            if is_trigger is None:
                trigger_text = "\n–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä"

            else:
                trigger_text = f"\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä: {is_trigger}"

            await FunnelStates.funnel_steps.set()
            await self.bot.send_message(
                chat_id=tg_id,
                text=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏ @{bot_info.username}" + trigger_text,
                reply_markup=funnel_steps_markup,
            )

        # –ü—Ä–æ—Å–º–æ—Ç—Ä —à–∞–≥–∞
        elif callback[:4] == "step":
            print(user_state)
            async with state.proxy() as data:
                token = data["token"]

            await self.bot.delete_message(
                chat_id=tg_id,
                message_id=mess_id
            )

            loading_message = await self.bot.send_message(
                chat_id=tg_id,
                text=loading_text
            )

            try:
                hours, minutes = self.funnel_db.get_step_time(token=token, step_number=int(callback[4:]))
            except TypeError:
                hours, minutes = self.funnel_db.get_step_time(token=token, step_number=int(callback[4:]))
            step_info = self.funnel_db.get_step_by_number(token=token, step_number=int(callback[4:]))
            step, audio, photo, video, video_note, document, document_name, markup_text, application_text, application_button, application_name = step_info

            markup = InlineKeyboardMarkup()

            if application_button is None:
                application_button = "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"

            if application_name is not None:
                markup.add(
                    InlineKeyboardButton(
                        text=application_button, callback_data=application_name
                    )
                )

            commands_list = self.db.get_commands_list(bot_token=token)
            if markup_text != "0":
                markup = create_markup(markup_text=markup_text, markup=markup, commands_list=commands_list)

            if user_state == "FunnelStates:delete_step":
                markup.add(
                    InlineKeyboardButton(
                        text="–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–π —à–∞–≥",
                        callback_data=f"stepdel{callback[4:]}"
                    )).add(
                        InlineKeyboardButton(
                            text="–ù–∞–∑–∞–¥",
                            callback_data="delete-step"
                        )
                    )


            else:
                markup.add(
                    InlineKeyboardButton(
                        text="–ù–∞–∑–∞–¥", callback_data="back-to-steps-list"
                    )
                )

            time_text = f"–®–∞–≥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ {hours}/{minutes} —á–∞—Å–æ–≤/–º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞"

            time_message = await self.bot.send_message(
                chat_id=chat,
                text=time_text
            )

            async with state.proxy() as data:
                data["time_message_id"] = time_message.message_id

            sending_message = await sending_function(
                bot=self.bot,
                chat_id=chat,
                text=step,
                audio=audio,
                photo=photo,
                video=video,
                video_note=video_note,
                document=document,
                document_name=document_name,
                markup=markup
            )

            await self.bot.delete_message(
                chat_id=tg_id,
                message_id=loading_message.message_id
            )




        # –ê–¥–º–∏–Ω–∫–∞
        elif callback == "get-admin-statistics":
            statistics_dict = self.admin_db.get_statistics()
            if statistics_dict is None:
                await self.bot.send_message(
                    chat_id=chat,
                    text="–ü–æ–∫–∞ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–∂–∞–ª–æ –Ω–∞ —Å—Ç–∞—Ä—Ç"
                )

            else:
                wb: Workbook = Workbook("users-list.xlsx")
                worksheet = wb.add_worksheet()

                if os.path.isfile("users-list.xlsx"):
                    os.remove("users-list.xlsx")

                row: int = 0  # –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏

                worksheet.write(row, 0, "id")
                worksheet.write(row, 1, "bots_count")
                worksheet.write(row, 2, "funnels_count")
                worksheet.write(row, 3, "users_count")
                worksheet.write(row, 4, "bots_urls")

                for user_id, user_info in statistics_dict.items():
                    bots_urls = [await Bot(token).me for token in user_info["tokens"]]
                    bots_urls = [f"@{bot.username}" for bot in bots_urls]

                    row += 1
                    worksheet.write(row, 0, user_id)
                    worksheet.write(row, 1, len(user_info["tokens"]))
                    worksheet.write(row, 2, user_info["funnel_count"])
                    worksheet.write(row, 3, user_info["users_count"])
                    worksheet.write(row, 4, ", ".join(bots_urls))

                wb.close()

                await self.bot.delete_message(
                    chat_id=chat,
                    message_id=mess_id
                )

                with open("users-list.xlsx", "rb") as document:
                    await self.bot.send_message(
                        chat_id=chat,
                        text="–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö:"
                    )

                    await self.bot.send_document(
                        chat_id=chat,
                        document=document
                    )
                    os.remove("users-list.xlsx")

                await self.bot.send_message(
                    chat_id=chat,
                    text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é",
                    reply_markup=admin_actions_markup
                )

        # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –¥–æ—á–µ—Ä–Ω–∏–º –±–æ—Ç–∞–º
        elif callback == "bots-mailing":
            await BotStates.admin_mailing_all_users.set()
            await self.bot.send_message(
                chat_id=chat,
                text="–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ, –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –¥–æ—á–µ—Ä–Ω–∏—Ö –±–æ—Ç–æ–≤",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∫–µ", callback_data="back-to-admin")
                )
            )


        # –†–∞—Å—Å—ã–ª–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –±–æ—Ç–µ
        elif callback == "mailing":
            await BotStates.admin_mailing_to_admins.set()
            await self.bot.send_message(
                chat_id=chat,
                text="–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª—é–±—ã–µ –æ–±—ä–µ–∫—Ç—ã (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, —Å—Ç–∏–∫–µ—Ä—ã - –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ.)\n\n"
                     "/cancel —á—Ç–æ–±—ã –≤—ã–π—Ç–∏"
            )



    async def add_invite_link_handler(self, message: Message, state: FSMContext):
        text = message.text
        markup = None

        async with state.proxy() as data:
            token = data["token"]
            instruction_message_id = data["instruction_message_id"]

        link_num = self.db.create_invite_link(
            token=token, name=text
        )

        if token != livegram_token:
            markup = InlineKeyboardMarkup().add(
                InlineKeyboardButton(text="–ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞", callback_data="back-to-admin")
            )

        for id in [instruction_message_id, message.message_id]:
            await self.bot.delete_message(
                chat_id=message.chat.id,
                message_id=id
            )

        bot_info = await Bot(token).me
        await self.bot.send_message(
            chat_id=message.chat.id,
            text=f"–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n"
                 f"https://t.me/{bot_info.username}?start={link_num}",
            reply_markup=markup
        )


    async def mailing_state_handler(self, message: Message, state: FSMContext):
        print(message)
        users = self.admin_db.get_users()
        chat_id = message.chat.id

        if message.text == "/cancel":
            await state.finish()
            await self.dp.bot.send_message(
                chat_id=chat_id,
                text=f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            )

        elif message.text == "/done":
            await self.dp.bot.send_message(
                chat_id=chat_id,
                text="üïë –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!"
            )

            async with state.proxy() as data:
                mess_id = data["message_id"]

            for user in users:
                try:
                    await self.dp.bot.copy_message(
                        chat_id=user,
                        from_chat_id=chat_id,
                        message_id=mess_id
                    )

                except Exception as e:
                    print(e)
                    continue

                finally:
                    await state.finish()

            await self.dp.bot.send_message(
                chat_id=chat_id,
                text=f"<b>–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {len(users)}\n\n",
                parse_mode="html"
            )

        else:
            async with state.proxy() as data:
                data["message_id"] = message.message_id

            await self.dp.bot.copy_message(
                chat_id=chat_id,
                from_chat_id=chat_id,
                message_id=message.message_id
            )

            await self.dp.bot.send_message(
                chat_id=chat_id,
                text="–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n"
                     "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /done, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
                     "/cancel - –≤—ã–π—Ç–∏"
            )


    async def admin_mailing_all_users(self, message: Message, state: FSMContext):
        tokens_and_users, users_count = self.admin_db.get_all_users()

        flag = False
        mailing_flag = True

        for token, users in tokens_and_users.items():
            text, audio_name, photo_name, video_name, video_note_name, document_name = await files_names(
                message=message, token=token, bot=self.bot
            )
            flag = any([text, audio_name, photo_name, video_name, video_note_name, document_name])

            if flag:
                if mailing_flag:
                    await self.dp.bot.send_message(
                        chat_id=message.chat.id,
                        text="üïë –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!"
                    )
                    mailing_flag = False

                for user in users:
                    bot = Bot(token)

                    try:
                        if message.video:
                            await message.video.download(f"files/video/sending_video.mp4")
                            video_name = f"files/video/sending_video.mp4"

                            if message.caption:
                                text = message.html_text


                            else:
                                text = ""

                            with open(video_name, "rb") as video:
                                await bot.send_video(
                                    chat_id=user,
                                    video=video,
                                    caption=text + "\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @customerlive_bot",
                                    parse_mode="html"
                                )

                        elif message.video_note:
                            await message.video.download(f"files/video/sending_video_note.mp4")
                            video_note_name = f"files/video/sending_video_note.mp4"

                            with open(video_note_name, "rb") as video_note:
                                await bot.send_animation(
                                    chat_id=user,
                                    animation=video_note,
                                    caption="Video"
                                )

                        elif message.photo:
                            photo = message.photo[-1]
                            photo_bytes = await photo.download("files/photo/sending.jpg")
                            photo_stream = open("files/photo/sending.jpg", "rb")
                            if message.caption:
                                await bot.send_photo(
                                    chat_id=user,
                                    photo=photo_stream.read(),
                                    caption=message.html_text + "\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @customerlive_bot",
                                    parse_mode="html"
                                )

                            else:
                                await bot.send_photo(chat_id=user, photo=photo_stream.read())
                            photo_stream.close()

                        elif message.voice:
                            audio = message.voice
                            audio_bytes = await audio.download("files/voice/sending.ogg")
                            audio_stream = open("files/voice/sending.ogg", "rb")

                            await bot.send_audio(
                                chat_id=user, audio=audio_stream.read(),
                                caption="–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @customerlive_bot", title="–ê—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ",
                                performer="@customerlive_bot",
                            )
                            audio_stream.close()

                        elif message.document:
                            file = await self.bot.get_file(message.document.file_id)
                            file_path = file.file_path

                            if file_path.endswith(".pdf"):
                                await message.document.download(f"files/document/{token}document.pdf")
                                document_name = f"files/document/{token}document.pdf"

                                if message.caption:
                                    text = message.html_text

                                else:
                                    text = ""

                                with open(document_name, "rb") as file:
                                    await bot.send_document(
                                        chat_id=user,
                                        document=file,
                                        caption=text + "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @customerlive_bot",
                                        parse_mode="html",
                                    )

                                os.remove(document_name)

                        elif message.text:
                            text = message.html_text

                            await bot.send_message(
                                chat_id=user,
                                text=text + "\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @customerlive_bot",
                                parse_mode="html",
                                disable_web_page_preview=True
                            )

                    except Exception as e:
                        print(e)
                        continue

                    finally:
                        await state.finish()
            else:
                break

        if flag:
            await self.bot.send_message(
                chat_id=message.chat.id,
                text=f"–†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–æ–≤: {users_count}"
            )


        else:
            await self.bot.send_message(
                chat_id=message.chat.id,
                text=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
                     f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n" \
                     f"1) –¢–µ–∫—Å—Ç (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)\n" \
                     f"2) –§–æ—Ç–æ\n" \
                     f"3) –§–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º\n" \
                     f"4) –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" \
                     f"5) –í–∏–¥–µ–æ\n" \
                     f"6) –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ\n" \
                     f"7) PDF-—Ñ–∞–π–ª—ã\n" \
                     f"–§–ê–ô–õ–´ –ù–ï –î–û–õ–ñ–ù–´ –ü–†–ï–í–´–®–ê–¢–¨ 20 –ú–ë!"
            )


    async def add_command_state_handler(self, message: Message, state: FSMContext):
        chat = message.chat.id
        message_text = message.text

        async with state.proxy() as data:
            token = data["token"]

        commands_list = self.db.get_commands_list(bot_token=token)


        if message_text not in commands_list:
            async with state.proxy() as data:
                data["title"] = message_text

            text = "–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã\n\n" \
                   "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n" \
                   "1) –¢–µ–∫—Å—Ç (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)\n" \
                   "2) –§–æ—Ç–æ\n" \
                   "3) –§–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º\n" \
                   "4) –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" \
                   "5) –í–∏–¥–µ–æ\n" \
                   "6) –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ\n" \
                   "7) PDF-—Ñ–∞–π–ª—ã\n" \
                   "–§–ê–ô–õ–´ –ù–ï –î–û–õ–ñ–ù–´ –ü–†–ï–í–´–®–ê–¢–¨ 20 –ú–ë!\n" \
                   "–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞"

            await BotStates.add_description.set()
            await self.dp.bot.send_message(
                chat_id=chat,
                text=text,
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(
                        text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞–º", callback_data="autoanswers"
                    )
                )
            )

        else:
            await message.answer(
                text="–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(
                        text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞–º", callback_data="autoanswers"
                    )
                )
            )

    async def add_description_state_handler(self, message: Message, state: FSMContext):
        chat = message.chat.id

        async with state.proxy() as data:
            title = data["title"]
            token = data["token"]
            data["message_with_data"] = message
            data["mode"] = "command"

            text, audio_name, photo_name, video_name, video_note_name, document_name = await files_names(
                message=message, token=token, bot=self.bot
            )
            flag = any([text, audio_name, photo_name, video_name, video_note_name, document_name])
            # print("i'm here")

            if len(text) > 800:
                await self.bot.send_message(
                    chat_id=chat,
                    text="–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å 800 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                    reply_markup=back_to_admin_markup
                )

            elif flag:
                await BotStates.add_markup.set()

                text = "–¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–∏–º –∫–Ω–æ–ø–∫–∏:\n\n" \
                       "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n" \
                       "text - url\n" \
                       "text2 - url && text3 - url\n\n" \
                       "text - –Ω–∞–¥–ø–∏—Å—å –∫–Ω–æ–ø–∫–∏ url - —Å—Å—ã–ª–∫–∞\n" \
                       "'-' - —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å\n" \
                       "'&&' - —Å–∫–ª–µ–∏—Ç—å –≤ —Å—Ç—Ä–æ–∫—É\n\n" \
                       "url –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –¥—Ä—É–≥–æ–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–∞–π—Ç\n\n" \
                       "–ï–°–õ–ò –ù–ï –ù–£–ñ–ù–´ –ö–ù–û–ü–ö–ò –û–¢–ü–†–ê–í–¨ 0\n" \
                       "–ö–Ω–æ–ø–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ä–µ–∑ ' - ' —Å –ø—Ä–æ–±–µ–ª–∞–º–∏!"

                await self.bot.send_message(
                    chat_id=chat,
                    text=text,
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton(
                            text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞", callback_data="back-to-admin"
                        )
                    )
                )

            else:
                text = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n\n" \
                       "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n" \
                       "1) –¢–µ–∫—Å—Ç (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)\n" \
                       "2) –§–æ—Ç–æ\n" \
                       "3) –§–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º\n" \
                       "4) –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" \
                       "5) –í–∏–¥–µ–æ\n" \
                       "6) –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ\n" \
                       "7) PDF-—Ñ–∞–π–ª—ã\n" \
                       "–§–ê–ô–õ–´ –ù–ï –î–û–õ–ñ–ù–´ –ü–†–ï–í–´–®–ê–¢–¨ 20 –ú–ë!\n\n" \
                       "–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞"

                await self.bot.send_message(
                    chat_id=chat,
                    text=text,
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton(
                            text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞", callback_data="back-to-admin"
                        )
                    )
                )



    async def choose_command_state_handler(self, message: Message, state: FSMContext):
        chat = message.chat.id
        text = message.html_text

        async with state.proxy() as data:
            token = data["token"]
            command_mode = data["command_mode"]
            self.full_commands = self.db.get_commands_list(bot_token=token)

            if text in self.full_commands:
                data["title"] = text

                await BotStates.edit_text_command.set()

                if command_mode == "autoanswer":
                    message_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n" \
                           "1) –¢–µ–∫—Å—Ç (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)\n" \
                           "2) –§–æ—Ç–æ\n" \
                           "3) –§–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º\n" \
                           "4) –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" \
                           "5) –í–∏–¥–µ–æ\n" \
                           "6) –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ\n" \
                           "7) PDF-—Ñ–∞–π–ª—ã\n" \
                           "–§–ê–ô–õ–´ –ù–ï –î–û–õ–ñ–ù–´ –ü–†–ï–í–´–®–ê–¢–¨ 20 –ú–ë!"

                    text = f"–í—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: <i>{text}</i>\n" \
                           f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã.\n\n"

                    text = text + message_text
                    callback_data = "edit-text-command"

                elif command_mode == "command":
                    text = f"–í—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: <i>{text}</i>\n" \
                           f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.\n\n"
                    callback_data = "edit-command"

                instruction_message = await self.dp.bot.send_message(
                        chat_id=chat,
                        text=text,
                        parse_mode="html",
                        reply_markup=InlineKeyboardMarkup().add(
                            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=callback_data)
                        )
                    )

                async with state.proxy() as data:
                    data["instruction_message_id"] = instruction_message.message_id

            else:
                await self.dp.bot.send_message(
                    chat_id=chat,
                    text="–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã",
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="autoanswers")
                    )
                )

    async def edit_command_state_handler(self, message: Message, state: FSMContext):
        chat = message.chat.id

        async with state.proxy() as data:
            title = data["title"]
            token = data["token"]
            command_mode = data["command_mode"]

            if command_mode == "autoanswer":
                text, audio_name, photo_name, video_name, video_note_name, document_name = await files_names(
                    message=message, token=token, bot=self.bot
                )
                flag = any([text, audio_name, photo_name, video_name, video_note_name, document_name])

                if len(text) > 800:
                    await self.bot.send_message(
                        chat_id=chat,
                        text="–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å 800 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                        reply_markup=back_to_admin_markup
                    )

                elif flag:
                    async with state.proxy() as data:
                        data["mode"] = "command"
                        data["message_with_data"] = message

                    await BotStates.add_markup.set()

                    text = "–¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–∏–º –∫–Ω–æ–ø–∫–∏:\n\n" \
                           "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n" \
                           "text - url\n" \
                           "text2 - url && text3 - url\n\n" \
                           "text - –Ω–∞–¥–ø–∏—Å—å –∫–Ω–æ–ø–∫–∏ url - —Å—Å—ã–ª–∫–∞\n" \
                           "'-' - —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å\n" \
                           "'&&' - —Å–∫–ª–µ–∏—Ç—å –≤ —Å—Ç—Ä–æ–∫—É\n\n" \
                           "url –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –¥—Ä—É–≥–æ–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–∞–π—Ç\n\n" \
                           "–ï–°–õ–ò –ù–ï –ù–£–ñ–ù–´ –ö–ù–û–ü–ö–ò –û–¢–ü–†–ê–í–¨ 0\n" \
                           "–ö–Ω–æ–ø–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ä–µ–∑ ' - ' —Å –ø—Ä–æ–±–µ–ª–∞–º–∏!"

                    await self.bot.send_message(
                        chat_id=chat,
                        text=text,
                        reply_markup=InlineKeyboardMarkup().add(
                            InlineKeyboardButton(
                                text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞", callback_data="back-to-admin"
                            )
                        )
                    )
                    # self.db.add_command_with_description(
                    #     bot_token=token,
                    #     title=title,
                    #     description=text,
                    #     audio_name=audio_name,
                    #     photo_name=photo_name,
                    #     video_name=video_name,
                    #     video_note_name=video_note_name,
                    #     document_name=document_name
                    # )
                    #
                    # commands_dict = self.db.get_commands_with_descriptions(bot_token=token)
                    # for command in commands_dict:
                    #     if command == title:
                    #         description, audio, photo, video, video_note, document = commands_dict[command]
                    #         sending_message = await sending_function(
                    #             bot=self.bot,
                    #             chat_id=chat,
                    #             text=description,
                    #             audio=audio,
                    #             photo=photo,
                    #             video=video,
                    #             video_note=video_note,
                    #             document=document
                    #         )
                    #         data["sending_message_id"] = sending_message.message_id
                    #         break
                    #
                    # data["user_message_id"] = message.message_id
                    #
                    #
                    # await self.bot.send_message(
                    #     chat_id=chat,
                    #     text=f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã {title}, –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ:",
                    #     reply_markup=InlineKeyboardMarkup().add(
                    #         InlineKeyboardButton(
                    #             text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞", callback_data="back-to-admin"
                    #         )
                    #     )
                    # )

                else:
                    text = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n\n" \
                           "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n" \
                           "1) –¢–µ–∫—Å—Ç (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)\n" \
                           "2) –§–æ—Ç–æ\n" \
                           "3) –§–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º\n" \
                           "4) –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" \
                           "5) –í–∏–¥–µ–æ\n" \
                           "6) –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ\n" \
                           "7) PDF-—Ñ–∞–π–ª—ã\n" \
                           "–§–ê–ô–õ–´ –ù–ï –î–û–õ–ñ–ù–´ –ü–†–ï–í–´–®–ê–¢–¨ 20 –ú–ë!\n\n" \
                           "–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞"

                    await self.bot.send_message(
                        chat_id=chat,
                        text=text,
                        reply_markup=InlineKeyboardMarkup().add(
                            InlineKeyboardButton(
                                text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞", callback_data="back-to-admin"
                            )
                        )
                    )

            elif command_mode == "command":
                if message.text in self.db.get_commands_list(bot_token=token):
                    await self.bot.send_message(
                        chat_id=chat,
                        text="–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é.\n"
                             "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤",
                        parse_mode="html",
                        reply_markup=InlineKeyboardMarkup().add(
                            InlineKeyboardButton(
                                text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤", callback_data="autoanswers"
                            )
                        )
                    )

                elif message.text is not None:
                    self.db.update_command_name(
                        bot_token=token, prev_name=title, new_name=message.text
                    )

                    await self.bot.send_message(
                        chat_id=chat,
                        text=f"–ö–æ–º–∞–Ω–¥–∞ <i>{title}</i> —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{message.text}</b>\n"
                             f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã: <b>{message.text}</b> –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—Å—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —É –∫–æ–º–∞–Ω–¥—ã <i>{title}</i>",
                        parse_mode="html",
                        reply_markup=InlineKeyboardMarkup().add(
                            InlineKeyboardButton(
                                text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤", callback_data="autoanswers"
                            )
                        )
                    )

                else:
                    await self.bot.send_message(
                        chat_id=chat,
                        text=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç, –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º,"
                             f"–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤",
                        parse_mode="html",
                        reply_markup=InlineKeyboardMarkup().add(
                            InlineKeyboardButton(
                                text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤", callback_data="autoanswers"
                            )
                        )
                    )

    async def edit_start_message(self, message: Message, state: FSMContext):
        chat = message.chat.id
        # print(message)

        if message.text == "/start":
            await self.start_handler(message=message, state=state)
        async with state.proxy() as data:
            token = data["token"]
            data["message_with_data"] = message
            data["mode"] = "start"

            loading_message = await self.bot.send_message(
                chat_id=chat,
                text=loading_text
            )

            text, audio_name, photo_name, video_name, video_note_name, document_name = await files_names(message=message, token=token, bot=self.bot)
            flag = any([text, audio_name, photo_name, video_name, video_note_name, document_name])
            if len(text) > 800:
                await self.bot.send_message(
                    chat_id=chat,
                    text="–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å 800 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                    reply_markup=back_to_admin_markup
                )
                await self.bot.delete_message(
                    chat_id=chat,
                    message_id=loading_message.message_id
                )

            elif flag:
                await self.bot.delete_message(
                    chat_id=chat,
                    message_id=loading_message.message_id
                )
                await BotStates.add_markup.set()
                text = "–¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–∏–º –∫–Ω–æ–ø–∫–∏:\n\n" \
                       "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n" \
                       "text - url\n" \
                       "text2 - url && text3 - url\n\n" \
                       "text - –Ω–∞–¥–ø–∏—Å—å –∫–Ω–æ–ø–∫–∏ url - —Å—Å—ã–ª–∫–∞\n" \
                       "'-' - —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å\n" \
                       "'&&' - —Å–∫–ª–µ–∏—Ç—å –≤ —Å—Ç—Ä–æ–∫—É\n\n" \
                       "url –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –¥—Ä—É–≥–æ–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–∞–π—Ç\n\n" \
                       "–ï–°–õ–ò –ù–ï –ù–£–ñ–ù–´ –ö–ù–û–ü–ö–ò –û–¢–ü–†–ê–í–¨ 0\n" \
                       "–ö–Ω–æ–ø–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ä–µ–∑ ' - ' —Å –ø—Ä–æ–±–µ–ª–∞–º–∏!"

                await self.bot.send_message(
                    chat_id=chat,
                    text=text,
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton(
                            text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞", callback_data="back-to-admin"
                        )
                    )
                )
                # self.db.start_message(
                #     method="save",
                #     bot_token=token,
                #     text=text,
                #     audio_name=audio_name,
                #     photo_name=photo_name,
                #     video_name=video_name,
                #     video_note_name=video_note_name,
                #     document_name=document_name
                # )
                #
                # greeting, audio, photo, video, video_note, document = self.db.start_message(method="get", bot_token=token)
                #
                # sending_message = await sending_function(
                #     bot=self.bot,
                #     chat_id=chat,
                #     text=greeting,
                #     audio=audio,
                #     photo=photo,
                #     video=video,
                #     video_note=video_note,
                #     document=document
                # )
                #
                # data["user_message_id"] = message.message_id
                # data["sending_message_id"] = sending_message.message_id
                #
                # await self.bot.send_message(
                #         chat_id=chat,
                #         text="–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
                #         reply_markup=InlineKeyboardMarkup().add(
                #             InlineKeyboardButton(
                #                 text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞", callback_data="back-to-admin"
                #             )
                #         )
                #     )

            else:
                text = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞\n\n" \
                       "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n" \
                       "1) –¢–µ–∫—Å—Ç (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)\n" \
                       "2) –§–æ—Ç–æ\n" \
                       "3) –§–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º\n" \
                       "4) –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" \
                       "5) –í–∏–¥–µ–æ\n" \
                       "6) –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ\n" \
                       "7) PDF-—Ñ–∞–π–ª—ã\n" \
                       "–§–ê–ô–õ–´ –ù–ï –î–û–õ–ñ–ù–´ –ü–†–ï–í–´–®–ê–¢–¨ 20 –ú–ë!\n\n" \
                       "–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –æ–±—Ä–∞—Ç–Ω–æ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"

                await self.bot.send_message(
                    chat_id=chat,
                    text=text,
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton(
                            text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞", callback_data="back-to-admin"
                        )
                    )
                )






    async def delete_command_state_handler(self, message: Message, state: FSMContext):
        chat = message.chat.id
        text = message.text

        async with state.proxy() as data:
            token = data["token"]

            commands_list = self.db.get_commands_list(bot_token=token)

            if text in commands_list:
                self.db.delete_command(command=text, bot_token=token)
                # print(message.text, self.full_commands)
                sending_message = await self.dp.bot.send_message(
                    chat_id=chat,
                    text=f"–ö–æ–º–∞–Ω–¥–∞ <i>{text}</i>  —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
                    parse_mode="html",
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton(
                            text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞–º", callback_data="autoanswers"
                        )
                    )
                )
                data["sending_message_id"] = sending_message.message_id

                await BotStates.bot_settings.set()

            else:
                sending_message = await self.dp.bot.send_message(
                    chat_id=chat,
                    text="–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.",
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton(
                            text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞", callback_data="back-to-admin"
                        )
                    )
                )
                data["sending_message_id"] = sending_message.message_id

    async def add_application_text(self, message: Message, state: FSMContext):
        chat = message.chat.id
        text = message.text

        if len(text) <= 800:
            async with state.proxy() as data:
                data["application_text"] = message.html_text

            await BotStates.add_application_button.set()
            await self.bot.send_message(
                chat_id=chat,
                text="–ù–∞–∑–æ–≤–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è - 15 —Å–∏–º–≤–æ–ª–æ–≤",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞", callback_data="back-to-admin")
                )
            )

        elif len(text) > 800:
            await self.bot.send_message(
                chat_id=chat,
                text="–¢–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 800 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞", callback_data="back-to-admin")
                )
            )

    async def add_application_button(self, message: Message, state: FSMContext):
        chat = message.chat.id
        text = message.text

        if len(text) <= 15:
            async with state.proxy() as data:
                data["application_button"] = text

            await BotStates.add_application_name.set()
            await self.bot.send_message(
                chat_id=chat,
                text="–ù–∞–∑–æ–≤–∏—Ç–µ –∑–∞—è–≤–∫—É, —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä, –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–≤–∏—Ç –∑–∞—è–≤–∫—É, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ - 25 —Å–∏–º–≤–æ–ª–æ–≤",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞", callback_data="back-to-admin")
                )
            )

        elif len(text) > 15:
            await self.bot.send_message(
                chat_id=chat,
                text="–¢–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞", callback_data="back-to-admin")
                )
            )


    async def add_application_name(self, message: Message, state: FSMContext):
        chat = message.chat.id
        text = message.text

        if " " not in text and len(text) <= 25:
            async with state.proxy() as data:
                loading_message = await self.bot.send_message(
                    chat_id=chat,
                    text=loading_text
                )

                await self.add_info(chat, state, application_name=text, LMI=loading_message.message_id)


        else:
            await self.bot.send_message(
                chat_id=chat,
                text="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 25 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –æ—Ç–∫–∞–∂–∏—Ç–µ—Å—å –æ—Ç –∑–∞—è–≤–∫–∏ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(
                        text="–ù–µ –¥–µ–ª–∞—Ç—å –∑–∞—è–≤–∫—É",
                        callback_data="don't_add_application"
                    )
                ).add(
                        InlineKeyboardButton(
                            text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞",
                            callback_data="back-to-admin"
                        )
                    )
                )


        

    async def add_info(self, chat, state, application_name=None, LMI=None):
        async with state.proxy() as data:
            token = data["token"]
            mode = data["mode"]
            message_with_data = data["message_with_data"]
            markup_text = data["markup_text"]
            application_text = data.get("application_text")
            application_button = data.get("application_button")
            # print(message_with_data.document)
        commands_list = self.db.get_commands_list(bot_token=token)
        markup = InlineKeyboardMarkup()

        loading_message = await self.bot.send_message(
            chat_id=chat,
            text=loading_text
        )

        if LMI is not None:
            await self.bot.delete_message(
                chat_id=chat,
                message_id=LMI
            )

        if mode == "start":
            text, audio_name, photo_name, video_name, video_note_name, document_name = await files_names(
                message=message_with_data, token=token, bot=self.bot)

            self.db.start_message(
                method="save",
                bot_token=token,
                text=text,
                audio_name=audio_name,
                photo_name=photo_name,
                video_name=video_name,
                video_note_name=video_note_name,
                document_name=document_name,
                markup_text=markup_text,
                application_text=application_text,
                application_button=application_button,
                application_name=application_name
            )

            greeting, audio, photo, video, video_note, document, document_name, markup_text, application_text, application_button, application_name = self.db.start_message(
                method="get",
                bot_token=token
            )

            if application_button is None:
                application_button = "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"

            if application_name is not None:
                markup.add(
                    InlineKeyboardButton(
                        text=application_button, callback_data=application_name
                    )
                )

            if markup_text != "0":
                markup = create_markup(markup_text=markup_text, markup=markup, commands_list=commands_list)
            sending_message = await sending_function(
                bot=self.bot,
                chat_id=chat,
                text=greeting,
                audio=audio,
                photo=photo,
                video=video,
                video_note=video_note,
                document=document,
                document_name=document_name,
                markup=markup
            )

            async with state.proxy() as data:
                data["user_message_id"] = message_with_data.message_id
                data["sending_message_id"] = sending_message.message_id

            await BotStates.bot_settings.set()

            await self.bot.delete_message(
                chat_id=chat,
                message_id=loading_message.message_id
            )

            await self.bot.send_message(
                chat_id=chat,
                text="–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(
                        text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞", callback_data="back-to-admin"
                    )
                )
            )

        elif mode == "command":
            title = data["title"]
            text, audio_name, photo_name, video_name, video_note_name, document_name = await files_names(
                message=message_with_data, token=token, bot=self.bot
            )

            self.db.add_command_with_description(
                bot_token=token,
                title=title,
                description=text,
                audio_name=audio_name,
                photo_name=photo_name,
                video_name=video_name,
                video_note_name=video_note_name,
                document_name=document_name,
                markup_text=markup_text,
                application_text=application_text,
                application_button=application_button,
                application_name=application_name
            )

            if application_button is None:
                application_button = "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"

            if application_name is not None:
                markup.add(
                    InlineKeyboardButton(
                        text=application_button, callback_data=application_name.replace(" ", "%")
                    )
                )

            if markup_text != "0":
                markup = create_markup(markup_text=markup_text, markup=markup, commands_list=commands_list)
            commands_dict = self.db.get_commands_with_descriptions(bot_token=token)
            for command in commands_dict:
                if command == title:
                    description, audio, photo, video, video_note, document, document_name, markup_text, application_text, application_button, application_name = commands_dict[command]
                    sending_message = await sending_function(
                        bot=self.bot,
                        chat_id=chat,
                        text=description,
                        audio=audio,
                        photo=photo,
                        video=video,
                        video_note=video_note,
                        document=document,
                        document_name=document_name,
                        markup=markup
                    )

                    break

            async with state.proxy() as data:
                try:
                    data["sending_message_id"] = sending_message.message_id
                except Exception as e:
                    print(e, 1988)
                data["user_message_id"] = message_with_data.message_id

            await BotStates.bot_settings.set()

            await self.bot.delete_message(
                chat_id=chat,
                message_id=loading_message.message_id
            )

            await self.bot.send_message(
                chat_id=chat,
                text=f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã {title}, –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ:",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(
                        text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞", callback_data="back-to-admin"
                    )
                )
            )

        elif mode == "add_step":
            async with state.proxy() as data:
                token = data["token"]
                username = data["username"]
                time = data["time"]

                hours, minutes = list(map(int, time.split('/')))
                only_minutes = hours * 60 + minutes

                text, audio_name, photo_name, video_name, video_note_name, document_name = await files_names(
                    message=message_with_data, token=token, bot=self.bot
                )

                self.funnel_db.add_step(
                    tg_id=chat, token=token, step=text, minutes=only_minutes,
                    audio_name=audio_name, photo_name=photo_name,
                    video_name=video_name, video_note_name=video_note_name,
                    document_name=document_name, markup_text=markup_text,
                    application_text=application_text,
                    application_button=application_button,
                    application_name=application_name
                )

                await self.bot.send_message(
                    chat_id=chat,
                    text=f"–¢–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç: {hours}/{minutes} –ø–æ—Å–ª–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —ç—Ç–æ—Ç —à–∞–≥"
                )

            await self.bot.delete_message(
                chat_id=chat,
                message_id=loading_message.message_id
            )

            await BotStates.bot_settings.set()
            bot_info = await Bot(token).me
            is_trigger = self.funnel_db.get_trigger(token=token)

            if is_trigger is None:
                trigger_text = "\n–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä"

            else:
                trigger_text = f"\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä: {is_trigger}"

            await FunnelStates.funnel_steps.set()
            await self.bot.send_message(
                chat_id=chat,
                text=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏ @{bot_info.username}" + trigger_text,
                reply_markup=funnel_steps_markup,
            )

    async def add_markup(self, message: Message, state: FSMContext):
        text = message.text
        tg_id = message.from_user.id
        # print(message)
        # print(text)
        if " - " in text or text == "0":
            async with state.proxy() as data:
                data["markup_text"] = text

            await self.bot.send_message(
                chat_id=tg_id,
                text="–ö–Ω–æ–ø–∫–∏ –±—ã–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n\n"
                     "–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –∑–∞—è–≤–∫–∏?",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(
                        text="–î–∞", callback_data="add_application"
                    )
                ).add(InlineKeyboardButton(
                    text="–ù–µ—Ç", callback_data="don't_add_application"
                ))
            )

        else:
            await self.bot.send_message(
                chat_id=tg_id,
                text="–ö–Ω–æ–ø–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ä–µ–∑ ' - ' —Å –ø—Ä–æ–±–µ–ª–∞–º–∏!"
            )


    async def add_trigger_handler(self, message: Message, state: FSMContext):
        tg_id = message.from_user.id
        text = message.text

        async with state.proxy() as data:
            token = data["token"]
            self.funnel_db.add_trigger(tg_id=tg_id, token=token, trigger=text)
        bot_info = await Bot(token).me
        await FunnelStates.funnel_steps.set()

        await self.bot.send_message(
            chat_id=tg_id,
            text=f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: {text}"
        )

        await self.bot.send_message(
            chat_id=tg_id,
            text=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏ –±–æ—Ç–∞: @{bot_info.username}",
            reply_markup=funnel_steps_markup,
        )


    async def add_step_handler(self, message: Message, state: FSMContext):
        tg_id = message.from_user.id
        chat = message.from_user.id
        async with state.proxy() as data:
            token = data["token"]

        loading_message = await self.bot.send_message(
            chat_id=tg_id,
            text=loading_text
        )

        text, audio_name, photo_name, video_name, video_note_name, document_name = await files_names(
            message=message, token=token, bot=self.bot
        )

        flag = any([text, audio_name, photo_name, video_name, video_note_name, document_name])

        if len(text) > 800:
            await self.bot.send_message(
                chat_id=chat,
                text="–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å 800 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                reply_markup=back_to_funnel_settings
            )

            await self.bot.delete_message(
                chat_id=chat,
                message_id=loading_message.message_id
            )

        elif flag:
            async with state.proxy() as data:
                data["message_with_data"] = message
                # data["photo_name"] = photo_name
                # data["step"] = text
                # data["video_name"] = video_name
                # data["video_note_name"] = video_note_name
                # data["audio_name"] = audio_name
                # data["document_name"] = document_name

            await FunnelStates.add_time.set()
            text = "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞\n\n" \
                   "–í–ê–ñ–ù–û: —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Å—ã/–º–∏–Ω—É—Ç—ã, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ /\n" \
                   "–ü—Ä–∏–º–µ—Ä—ã:\n" \
                   "<pre>0/1</pre> ‚Äì –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞\n" \
                   "<pre>0/40</pre> - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 40 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞\n" \
                   "<pre>1/0</pre> - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —á–∞—Å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞\n" \
                   "<pre>3/15</pre> ‚Äì –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ 15 –º–∏–Ω—É—Ç, –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞\n" \
                   "<pre>42/0</pre> ‚Äì –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 42 —á–∞—Å–∞, –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞\n"

            await self.bot.delete_message(
                chat_id=tg_id,
                message_id=loading_message.message_id
            )

            await self.bot.send_message(
                chat_id=tg_id,
                text=text,
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–æ—Ä–æ–Ω–∫–∏", callback_data="funnel-settings")
                ),
                parse_mode="html"
            )

        else:
            await self.bot.send_message(
                chat_id=tg_id,
                text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞.\n\n"
                     "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º, –∞—É–¥–∏–æ, –≤–∏–¥–µ–æ, –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ-–∫—Ä—É–∂–æ–∫, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, pdf-—Ñ–∞–π–ª –∏ pdf-—Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é\n\n"
                     "–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"
            )

            await self.bot.delete_message(
                chat_id=tg_id,
                message_id=loading_message.message_id
            )

    async def add_time_handler(self, message: Message, state: FSMContext):
        tg_id = message.from_user.id
        print("time_handler", message)
        if message.text == "/start":
            await self.start_handler(message, state)

        elif message.text:
            text = message.text

            loading_message = await self.bot.send_message(
                chat_id=tg_id,
                text=loading_text
            )


            try:
                hours, minutes = list(map(int, text.split('/')))
                only_minutes = hours * 60 + minutes

                async with state.proxy() as data:
                    data["mode"] = "add_step"
                    data["time"] = text

                await BotStates.add_markup.set()
                text = "–¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–∏–º –∫–Ω–æ–ø–∫–∏:\n\n" \
                       "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n" \
                       "text - url\n" \
                       "text2 - url && text3 - url\n\n" \
                       "text - –Ω–∞–¥–ø–∏—Å—å –∫–Ω–æ–ø–∫–∏ url - —Å—Å—ã–ª–∫–∞\n" \
                       "'-' - —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å\n" \
                       "'&&' - —Å–∫–ª–µ–∏—Ç—å –≤ —Å—Ç—Ä–æ–∫—É\n\n" \
                       "url –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –¥—Ä—É–≥–æ–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–∞–π—Ç\n\n" \
                       "–ï–°–õ–ò –ù–ï –ù–£–ñ–ù–´ –ö–ù–û–ü–ö–ò –û–¢–ü–†–ê–í–¨ 0"

                await self.bot.send_message(
                    chat_id=tg_id,
                    text=text,
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton(
                            text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞", callback_data="back-to-admin"
                        )
                    )
                )

            except Exception as e:
                print(e, "error")
                await self.bot.send_message(
                    chat_id=tg_id,
                    text="–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Å—ã/–º–∏–Ω—É—Ç—ã",
                )

            finally:
                await self.bot.delete_message(
                    chat_id=tg_id,
                    message_id=loading_message.message_id
                )

            #     await state.finish()
            #     await FunnelStates.funnel_steps.set()
            #     async with state.proxy() as data:
            #         data["token"] = token
            #         data["username"] = username
        else:
            await self.bot.send_message(
                chat_id=tg_id,
                text="–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Å—ã/–º–∏–Ω—É—Ç—ã",
            )

    async def text_handler(self, message: Message, state: FSMContext):
        text = message.text
        print(message)

    async def add_bot_state(self, message: Message, state: FSMContext):
        text = message.text
        tg_id = message.from_user.id
        mess_id = message.message_id
        menu = InlineKeyboardMarkup().add(InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back-to-menu"))

        if message.text == "/start":
            await self.start_handler(message, state)

        elif text[:10].isdigit() and text[10] == ":":
            loading_message = await self.bot.send_message(
                chat_id=tg_id,
                text=loading_text
            )

            try:
                tokens = self.db.get_tokens()

                if tokens is None or text not in tokens:
                    self.db.add_bot(
                        tg_id=tg_id,
                        bot_token=text
                    )

                    self.db.start_message(
                        method="save",
                        bot_token=text,
                        text="–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                    )

                    # self.funnel_db.add_funnel(
                    #     token=text,
                    #     tg_id=tg_id
                    # )

                    async with state.proxy() as data:
                        try:
                            await self.bot.delete_message(
                                chat_id=tg_id,
                                message_id=data["message_id"]
                            )
                        except Exception:
                            pass

                        try:
                            await self.bot.delete_message(
                                chat_id=tg_id,
                                message_id=data["token_is_used"]
                            )
                        except Exception:
                            pass

                        try:
                            await self.bot.delete_message(
                                chat_id=tg_id,
                                message_id=data["incorrect_token"]
                            )
                        except Exception:
                            pass

                        try:
                            await self.bot.delete_message(
                                chat_id=tg_id,
                                message_id=data["used_token_message"]
                            )
                        except Exception:
                            pass

                    await self.bot.delete_message(
                        chat_id=tg_id,
                        message_id=mess_id
                    )

                    async with state.proxy() as data:
                        data["token"] = text

                    bot_info = await Bot(token=text).me

                    await AddBotStates.step_1.set()
                    text = f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–æ—Ç: @{bot_info.username}\n\n" \
                           f"–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à–µ–≥–æ –±–æ—Ç–∞\n" \
                           f"1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞–Ω–∞–ª–∞ ‚Äú–ø—Ä–∏–≤–∞—Ç–Ω—ã–π‚Äù\n" \
                           f"2. –î–æ–±–∞–≤—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª\n" \
                           f"3. –ù–∞–∑–Ω–∞—á—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n" \
                           f"–í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∏–∞–ª–æ–≥ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º.\n\n" \
                           f"–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"

                    await self.bot.delete_message(
                        chat_id=tg_id,
                        message_id=loading_message.message_id
                    )

                    step_1_message = await self.bot.send_message(
                        chat_id=tg_id,
                        text=text,
                        reply_markup=InlineKeyboardMarkup().add(
                            InlineKeyboardButton(text="–î–∞–ª–µ–µ >>>", callback_data="to-2-step")
                        )
                    )

                    async with state.proxy() as data:
                        data["step_1"] = step_1_message.message_id
                        # data["bot_added_message"] = bot_added_message.message_id

                else:
                    token_is_used = await self.bot.send_message(
                        chat_id=tg_id,
                        text="–î–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è",
                        reply_markup=menu
                    )

                    async with state.proxy() as data:
                        data["used_token_message"] = message.message_id
                        data["token_is_used"] = token_is_used.message_id
                        #print(data)

                    await self.bot.delete_message(
                        chat_id=tg_id,
                        message_id=loading_message.message_id
                    )

            except Exception as e:
                print(e)



        else:
            incorrect_token = await self.bot.send_message(
                chat_id=tg_id,
                text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω",
                reply_markup=menu
            )

            async with state.proxy() as data:
                data["incorrect_token"] = incorrect_token.message_id
                #print(data)

    async def admin_handler(self, message: Message, state: FSMContext):
        if message.from_user.id == 1283802964 or message.from_user.id == 84327932:
            await state.finish()
            await self.bot.send_message(
                chat_id=message.from_user.id,
                text="–ê–¥–º–∏–Ω–∫–∞",
                reply_markup=admin_actions_markup
            )

    def register_handler(self):
        self.dp.register_message_handler(callback=self.add_bot_state, state=AddBotStates.add_bot)
        self.dp.register_message_handler(callback=self.add_time_handler, content_types=ContentTypes.ANY, state=FunnelStates.add_time)
        self.dp.register_message_handler(callback=self.add_step_handler, content_types=ContentTypes.ANY, state=FunnelStates.add_step)
        self.dp.register_message_handler(callback=self.add_trigger_handler, content_types=ContentTypes.TEXT, state=FunnelStates.add_trigger)
        self.dp.register_callback_query_handler(callback=self.callback_handler, state="*")
        self.dp.register_message_handler(callback=self.add_markup, content_types=ContentTypes.TEXT, state=BotStates.add_markup)
        self.dp.register_message_handler(callback=self.add_application_text, content_types=ContentTypes.TEXT, state=BotStates.add_application_text)
        self.dp.register_message_handler(callback=self.add_application_button, content_types=ContentTypes.TEXT, state=BotStates.add_application_button)
        self.dp.register_message_handler(callback=self.add_application_name, state=BotStates.add_application_name, content_types=ContentTypes.TEXT)
        self.dp.register_message_handler(callback=self.add_command_state_handler, content_types=ContentTypes.TEXT,
                                         state=BotStates.add_command)
        self.dp.register_message_handler(callback=self.add_invite_link_handler, state=BotStates.add_invite_link, content_types=ContentTypes.TEXT)
        self.dp.register_message_handler(callback=self.add_description_state_handler, content_types=ContentTypes.ANY, state=BotStates.add_description)
        self.dp.register_message_handler(callback=self.choose_command_state_handler, content_types=ContentTypes.TEXT, state=BotStates.choose_command)
        self.dp.register_message_handler(callback=self.edit_command_state_handler, content_types=ContentTypes.ANY, state=BotStates.edit_text_command)
        self.dp.register_message_handler(callback=self.edit_start_message, content_types=ContentTypes.ANY, state=BotStates.edit_start_message),
        self.dp.register_message_handler(callback=self.delete_command_state_handler, content_types=ContentTypes.TEXT, state=BotStates.delete_command)
        self.dp.register_message_handler(callback=self.admin_mailing_all_users, content_types=ContentTypes.ANY, state=BotStates.admin_mailing_all_users)
        self.dp.register_message_handler(callback=self.mailing_state_handler, content_types=ContentTypes.ANY, state=BotStates.admin_mailing_to_admins)
        self.dp.register_message_handler(callback=self.start_handler, commands=["start"], state="*")
        self.dp.register_message_handler(callback=self.admin_handler, commands=["admin"], state="*")
        self.dp.register_message_handler(callback=self.text_handler, content_types=ContentTypes.TEXT)


    def run(self):
        self.register_handler()
        executor.start_polling(dispatcher=self.dp, skip_updates=True)


if __name__ == "__main__":
    botik = LivegramBot()
    botik.run()